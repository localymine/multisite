#!/usr/bin/env node

'use strict';

var fs = require('fs'),
    path = require('path'),
    chalk = require('chalk'),
    toolkit = require('commander'),
    project = require('./package.json'),
    manifest = require('./manifest.json'),
    // Tasks & Helpers
    log = require('./tasks/helpers/log'),
    lintJs = require('./tasks/lint-js'),
    testJs = require('./tasks/test-js'),
    buildJs = require('./tasks/build-js'),
    buildCss = require('./tasks/build-css'),
    buildDocs = require('./tasks/build-docs'),
    generateGraph = require('./tasks/helpers/generateGraph'),
    promise = null;

function task() {
    var actions = arguments,
        promises = [];

    return function() {
        for (var i = 0; i < actions.length; i++) {
            promises.push(actions[i].apply(null, arguments));
        }

        promise = Promise.all(promises);
    };
}

// Prepare command line tool
toolkit.package = project;
toolkit.manifest = manifest;
toolkit
    .version(project.version)
    .option('-j, --js <path>', 'JavaScript source path', './js-es6')
    .option('-c, --css <path>', 'CSS source path', './scss-3.0')
    .option('-o, --out <path>', 'Output build path', './build')
    .option('--rtl', 'Enable right-to-left mode', false)
    .option('--debug', 'Enable debug mode', false)
    .option('--namespace <value>', 'Namespace to prepend to all CSS class names')
    .option('--modules <list>', 'Filter which modules to include in the output', function(value) {
        return value.split(',');
    }, []);

toolkit
    .command('lint')
    .description('Lint JavaScript files using ESLint')
    .action(task(lintJs));

toolkit
    .command('test')
    .description('Test JavaScript files using Karma')
    .action(task(testJs));

toolkit
    .command('build')
    .description('Transpile both JavaScript and CSS files')
    .action(task(buildJs, buildCss));

toolkit
    .command('js')
    .description('Transpile ES6 JavaScript to ES5')
    .action(task(buildJs));

toolkit
    .command('css')
    .description('Transpile Sass to CSS')
    .action(task(buildCss));

toolkit
    .command('docs')
    .description('Generate the documentation table of contents')
    .action(task(buildDocs));

// Execute command
toolkit.parse(process.argv);

// Display help menu if no command provided
if (!toolkit.args.length) {
    console.log([
        '  ______   ______   ______   __       __  __   __   ______',
        ' /\\__  _\\ /\\  __ \\ /\\  __ \\ /\\ \\     /\\ \\/ /_ /\\ \\ /\\__  _\\',
        ' \\/_/\\ \\/ \\ \\ \\/\\ \\\\ \\ \\/\\ \\\\ \\ \\____\\ \\  _  \\\\ \\ \\\\/_/\\ \\/',
        '    \\ \\_\\  \\ \\_____\\\\ \\_____\\\\ \\_____\\\\ \\_\\ \\_\\\\ \\_\\  \\ \\_\\',
        '     \\/_/   \\/_____/ \\/_____/ \\/_____/ \\/_/\\/_/ \\/_/   \\/_/',
        '',
        '  Titon Toolkit v' + project.version
    ].join('\n'));

    toolkit.help();
}

// Handle the result of a command action
if (promise instanceof Promise) {
    promise
        .then(function() {
            process.exit(0);
        })
        .catch(function(error) {
            log.stack(error);
            process.exit(1);
        });
}
